export const pytorchCode: string[] = [
  "import torch",
  "import torch.nn as nn",
  "import torch.optim as optim",
  "",
  "class SimpleNet(nn.Module):",
  "    def __init__(self):",
  "        super(SimpleNet, self).__init__()",
  "        self.fc1 = nn.Linear(10, 50)",
  "        self.relu = nn.ReLU()",
  "        self.fc2 = nn.Linear(50, 1)",
  "",
  "    def forward(self, x):",
  "        x = self.fc1(x)",
  "        x = self.relu(x)",
  "        x = self.fc2(x)",
  "        return x",
  "",
  "input_features = 10",
  "num_samples = 100",
  "X_train = torch.randn(num_samples, input_features)",
  "y_train = torch.randn(num_samples, 1)",
  "",
  "model = SimpleNet()",
  "criterion = nn.MSELoss()",
  "optimizer = optim.SGD(model.parameters(), lr=0.01)",
  "",
  "num_epochs = 100",
  "for epoch in range(num_epochs):",
  "    optimizer.zero_grad()",
  "    outputs = model(X_train)",
  "    loss = criterion(outputs, y_train)",
  "    loss.backward()",
  "    optimizer.step()",
  "",
  "    if (epoch+1) % 10 == 0:",
  "        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')",
  "",
  "print('Training complete.')",
];